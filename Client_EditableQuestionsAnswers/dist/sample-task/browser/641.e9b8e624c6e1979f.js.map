{"version":3,"file":"641.e9b8e624c6e1979f.js","mappings":"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","names":["InterviewQuestionsPanelComponent","constructor","questionAnswerService","router","loaderService","platformId","highlightService","this","ngOnInit","localStorage","getItem","currentData","subscribe","data","result","questionAnswerList","display","hightLightAgain","getQuestionAnswerListServerSide","navigateByUrl","e","PLATFORM_ID","selectors","i0","ctx_r4","oxw","ctx_r6","ctx_r8","routes","path","component","fb","username","password","userForm","group","Validators","confirmPassword","validator","passwordMatchValidator","setIsAdmin","getUserDetails","toggleRegistrationFields","showRegistrationFields","get","setValue","checkPasswordAndConfirmPasswordMatch","hasError","alert","checkUsernameAndPasswordLength","value","length","validateSignUpDetails","handleSignUp","valid","login","signUp","response","isUserRegistered","handleLogin","message","error","validateLoginDetails","t","setPrivilegesOfUser","submitForm","isAdmin","setItem","navigate","setLoggedInUserDetails","invalidUser","userDetails","setUserDetails","userName","_id","formattedUserDetails","getUsers","getloginDetails","success","users","deleteUser","deleteloginDetails","updatePassword","newPassword","updateloginDetails","blurEventHandler","event","target","classList","remove","enteredValue","add","control","setErrors","passwordMismatch","LoginComponent","ctx","AdminPanelRoutingModule","CommonModule","RouterModule","AdminPanelModule","FormsModule","FontAwesomeModule","InterviewQuestionsModule","ReactiveFormsModule"],"sourceRoot":"webpack:///","sources":["./src/app/admin-panel/interview-questions-panel/interview-questions-panel.component.ts","./src/app/admin-panel/interview-questions-panel/interview-questions-panel.component.html","./src/app/admin-panel/login/login.component.html","./src/app/admin-panel/admin-panel-routing.module.ts","./src/app/admin-panel/login/login.component.ts","./src/app/admin-panel/admin-panel.module.ts"],"sourcesContent":["import { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';\r\nimport {QuestionAnswerService} from '../../services/question-answer-service/question-answer.service';\r\nimport { Router } from '@angular/router';\r\nimport {LoaderService} from './../../services/loader-service/loader.service';\r\nimport { HightlightService } from 'src/app/services/highlight-service/hightlight.service';\r\n\r\n@Component({\r\n  selector: 'app-interview-questions-panel',\r\n  templateUrl: './interview-questions-panel.component.html',\r\n  styleUrls: ['./interview-questions-panel.component.scss']\r\n})\r\nexport class InterviewQuestionsPanelComponent implements OnInit {\r\n\r\n  questionAnswerList:any;\r\n  platformId: Object;\r\n  constructor(\r\n    private questionAnswerService:QuestionAnswerService,\r\n    private router:Router,private loaderService:LoaderService,\r\n    @Inject(PLATFORM_ID) platformId: Object,\r\n    private highlightService: HightlightService\r\n  ) {\r\n      this.platformId = platformId;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if(this.platformId && localStorage.getItem('loggedIn')==\"true\") {\r\n      this.questionAnswerService.currentData.subscribe((data)=>{\r\n        if (data && data['result']) {\r\n          this.questionAnswerList = data['result'];\r\n          this.loaderService.display(false);\r\n          this.highlightService.hightLightAgain();\r\n        }\r\n     })\r\n     this.questionAnswerService.getQuestionAnswerListServerSide();\r\n   }\r\n   else {\r\n     this.router.navigateByUrl('/admin-panel');\r\n   }\r\n  }\r\n}\r\n","<app-question-answer-panel [questionAnswerList]=\"questionAnswerList\" [adminMode]=true></app-question-answer-panel>\r\n","<div class=\"login-panel-container\">\r\n        <fieldset>\r\n            <legend>{{ showRegistrationFields ? 'Register' : 'Login' }}:</legend>\r\n            <form [formGroup]=\"userForm\" (ngSubmit)=\"submitForm()\">\r\n                <!-- Existing username and password fields -->\r\n                <div class=\"Sign-upContainer\">\r\n                    <label for=\"username\" class=\"col-4 col-form-label\">Username</label>\r\n                    <div class=\"col-8\">\r\n                        <input id=\"username\" name=\"username\" formControlName=\"username\" (blur)=\"blurEventHandler($event)\"\r\n                            placeholder=\"Enter your Username\" type=\"text\" class=\"form-control\" required>\r\n                    </div>\r\n                </div>\r\n                <div class=\"Sign-upContainer\">\r\n                    <label for=\"password\" class=\"col-4 col-form-label\">Password</label>\r\n                    <div class=\"col-8\">\r\n                        <input id=\"password\" name=\"password\" formControlName=\"password\" (blur)=\"blurEventHandler($event)\"\r\n                            placeholder=\"Enter your Password\" type=\"password\" class=\"form-control\" required>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Registration fields (conditionally displayed) -->\r\n                <div *ngIf=\"showRegistrationFields\">\r\n                    <div class=\"Sign-upContainer\">\r\n                        <label for=\"confirmPassword\" class=\"col-4 col-form-label\">Confirm Password</label>\r\n                        <div class=\"col-8\">\r\n                            <input id=\"confirmPassword\" name=\"confirmPassword\" formControlName=\"confirmPassword\" (blur)=\"blurEventHandler($event)\"\r\n                                placeholder=\"Confirm Password\" type=\"password\" class=\"form-control\" required>\r\n                            <!-- Display a validation error message if passwords do not match -->\r\n                            <div *ngIf=\"userForm.get('password').hasError('passwordMismatch') && userForm.get('confirmPassword').touched\">\r\n                                Passwords do not match.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"Sign-upContainer\">\r\n                    <label for=\"username\" class=\"col-4 col-form-label\"></label>\r\n                    <div class=\"col-8\">\r\n                        <!-- Show the \"Submit\" button and the appropriate button based on registration mode -->\r\n                        <button type=\"submit\" class=\"btn-outline-success Submit-btn btn\">Submit</button>\r\n                        <button *ngIf=\"showRegistrationFields\" class=\"btn login-btn\" (click)=\"toggleRegistrationFields()\">Login</button>\r\n                        <button *ngIf=\"!showRegistrationFields\" class=\"btn login-btn\" (click)=\"toggleRegistrationFields()\">Register</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </fieldset>\r\n</div>\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { InterviewQuestionsPanelComponent } from './interview-questions-panel/interview-questions-panel.component';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'updateInterviewQuestions',\r\n    component: InterviewQuestionsPanelComponent\r\n  },\r\n  {\r\n    path: 'admin-panel/updateInterviewQuestions',\r\n    component: InterviewQuestionsPanelComponent\r\n  },\r\n\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes)\r\n  ]\r\n})\r\nexport class AdminPanelRoutingModule { }\r\n","import { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\nimport { QuestionAnswerService } from '../../services/question-answer-service/question-answer.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  platformId: Object;\r\n  userForm: FormGroup;\r\n  showRegistrationFields: boolean = false;\r\n  isUserRegistered: boolean = false;\r\n  users: any[] = [];\r\n  login: any = { username: \"\", password: \"\" };\r\n\r\n  constructor(\r\n    private questionAnswerService: QuestionAnswerService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    @Inject(PLATFORM_ID) platformId: Object\r\n  ) {\r\n    this.platformId = platformId;\r\n\r\n    this.userForm = this.fb.group({\r\n      username: ['', [Validators.required, Validators.minLength(3)]],\r\n      password: ['', [Validators.required]],\r\n      confirmPassword: ['']\r\n    }, {\r\n      validator: this.passwordMatchValidator\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.platformId && localStorage.getItem('loggedIn') == \"true\") {\r\n      this.questionAnswerService.setIsAdmin(true);\r\n      this.questionAnswerService.getUserDetails();\r\n      // this.redirectToUpdateQuestions();\r\n    }\r\n  }\r\n\r\n  toggleRegistrationFields() {\r\n    this.showRegistrationFields = !this.showRegistrationFields;\r\n    this.userForm.get('confirmPassword').setValue('');\r\n  }\r\n\r\n  checkPasswordAndConfirmPasswordMatch() {\r\n    if (this.userForm.get('confirmPassword').hasError('passwordMismatch')) {\r\n      // Check for password mismatch error\r\n      alert('Password and Confirm Password should match!');\r\n      return; // Stop processing and exit the function\r\n    }\r\n  }\r\n\r\n  checkUsernameAndPasswordLength() {\r\n        // Check if blur event conditions are satisfied for username and password\r\n        if (\r\n          this.userForm.get('username').hasError('minlength') ||\r\n          this.userForm.get('username').hasError('required') ||\r\n          this.userForm.get('password').hasError('required') ||\r\n          this.userForm.get('username').value.length < 3 ||\r\n          this.userForm.get('password').value.length < 3\r\n        ) {\r\n          alert('Minimum 3 alphabets or numbers required!');\r\n          return; \r\n        }\r\n  }\r\n\r\n  validateSignUpDetails() {\r\n    this.checkPasswordAndConfirmPasswordMatch();\r\n    this.checkUsernameAndPasswordLength();\r\n  }\r\n\r\n  handleSignUp() {\r\n         // Registration logic\r\n        this.validateSignUpDetails();\r\n        if (this.userForm.valid) {\r\n          // If the form is valid, proceed with registration\r\n          this.login.username = this.userForm.get('username').value;\r\n          this.login.password =  this.userForm.get('password').value;\r\n  \r\n          // Call the signUp API to register the user\r\n          this.questionAnswerService.signUp(this.login).subscribe(\r\n            (response: any) => {\r\n              if (response) {\r\n                this.isUserRegistered = true;\r\n               // this.userForm.reset(); // Reset the form\r\n                this.handleLogin();\r\n              } else {\r\n                alert('Registration failed: ' + response.message);\r\n              }\r\n            },\r\n            (error) => {\r\n              alert('Registration failed: ' + error.message);\r\n            }\r\n          );\r\n        } else {\r\n          // Registration form validation failed\r\n          alert('Please fill in all required fields and ensure passwords match.');\r\n        }\r\n  }\r\n\r\n  handleLogin() {\r\n      // Login logic\r\n      if (this.userForm.get('username').valid && this.userForm.get('password').valid) {\r\n        // If the form is valid, proceed with login\r\n        this.login.username = this.userForm.get('username').value;\r\n        this.login.password =  this.userForm.get('password').value;\r\n\r\n        // Call the getloginDetails API to retrieve registered user details\r\n        this.questionAnswerService.validateLoginDetails(this.login).subscribe(\r\n          (response: any) => {\r\n            if (response) {\r\n //             const matchingUser = response.find((user) => user.username === username && user.password === password);\r\n              if (response) {\r\n                this.setPrivilegesOfUser(response);\r\n                // console.log('isAdmin:', response.isAdmin);\r\n                // this.questionAnswerService.setIsAdmin(response.isAdmin);\r\n                // localStorage.setItem('loggedIn', 'true');\r\n                // if (response.isAdmin) {\r\n                //   this.router.navigateByUrl('/admin-panel/updateInterviewQuestions');\r\n                // } else {\r\n                //   this.router.navigate(['/userPost']);\r\n                // }\r\n                // this.questionAnswerService.setIsAdmin(false);\r\n                // this.setLoggedInUserDetails(response);\r\n                // localStorage.setItem('loggedIn', 'true');\r\n              } else {\r\n                alert('Login failed: Invalid username or password.');\r\n              }\r\n            } else {\r\n              alert('Login failed: ' + response.message);\r\n            }\r\n          },\r\n          (error) => {\r\n            alert('Login failed: ' + error.message);\r\n          }\r\n        );\r\n      } else {\r\n        // Login form validation failed\r\n        alert('Please fill in valid username and password.');\r\n      }\r\n  }\r\n\r\n  submitForm() {\r\n    if (this.showRegistrationFields) {\r\n      this.handleSignUp();\r\n    } else {\r\n      this.handleLogin();\r\n    }\r\n  }\r\n\r\n  setPrivilegesOfUser(response) {\r\n       this.questionAnswerService.setIsAdmin(response.isAdmin);\r\n       localStorage.setItem('loggedIn', 'true');\r\n       if (response.isAdmin) {\r\n         this.router.navigateByUrl('/admin-panel/updateInterviewQuestions');\r\n       } else {\r\n         // Regular user login\r\n         this.router.navigate(['/user-posts']);\r\n       }\r\n       // Login successful\r\n       this.questionAnswerService.setIsAdmin(false);\r\n       this.setLoggedInUserDetails(response);\r\n       localStorage.setItem('loggedIn', 'true');\r\n  }\r\n\r\n  validateLoginDetails() {\r\n    this.questionAnswerService.validateLoginDetails(this.login).subscribe(data=>{\r\n       if(data && data['invalidUser']) {\r\n         alert('incorrect credentials');\r\n       }\r\n       else {\r\n         this.setPrivilegesOfUser(data);\r\n       }\r\n     })\r\n  }\r\n\r\n  setLoggedInUserDetails(userDetails) {\r\n    const formattedUserDetails ={\r\n      userName: userDetails.username,\r\n      isAdmin: userDetails.isAdmin,\r\n      _id: userDetails._id\r\n    }\r\n    this.questionAnswerService.setUserDetails(formattedUserDetails);\r\n  }\r\n\r\n  // Function to retrieve users\r\n  getUsers() {\r\n    this.questionAnswerService.getloginDetails().subscribe(\r\n      (response: any) => {\r\n        if (response.success) {\r\n          // Handle successful retrieval of users here\r\n          this.users = response.data;\r\n        } else {\r\n          alert('Failed to retrieve users: ' + response.message);\r\n        }\r\n      },\r\n      (error) => {\r\n        alert('Failed to retrieve users: ' + error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Function to delete a user\r\n  deleteUser(username: string) {\r\n    this.questionAnswerService.deleteloginDetails(username).subscribe(\r\n      (response: any) => {\r\n        if (response.success) {\r\n          // Handle successful deletion of the user here\r\n          alert('User deleted successfully.');\r\n          // Optionally, you can update the user list or perform other actions\r\n        } else {\r\n          alert('Failed to delete user: ' + response.message);\r\n        }\r\n      },\r\n      (error) => {\r\n        alert('Failed to delete user: ' + error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Function to update user password\r\n  updatePassword(username: string, newPassword: string) {\r\n    this.questionAnswerService.updateloginDetails({ username, password: newPassword }).subscribe(\r\n      (response: any) => {\r\n        if (response.success) {\r\n          // Handle successful password update here\r\n          alert('Password updated successfully.');\r\n          // Optionally, you can reset the form or perform other actions\r\n        } else {\r\n          alert('Failed to update password: ' + response.message);\r\n        }\r\n      },\r\n      (error) => {\r\n        alert('Failed to update password: ' + error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  blurEventHandler(event: FocusEvent) {\r\n    (event.target as HTMLInputElement).classList.remove('invalid-input');\r\n    const enteredValue = (event.target as HTMLInputElement).value;\r\n    if (enteredValue.length < 3) {\r\n      (event.target as HTMLInputElement).classList.add('invalid-input');\r\n    }\r\n  }\r\n  // redirectToUpdateQuestions() {\r\n  //   this.router.navigateByUrl('/admin-panel/updateInterviewQuestions');\r\n  // }\r\n\r\n  // Custom validator function to check if passwords match\r\n  passwordMatchValidator(control: AbstractControl) {\r\n    const password = control.get('password').value;\r\n    const confirmPassword = control.get('confirmPassword').value;\r\n\r\n    if (password !== confirmPassword) {\r\n      control.get('confirmPassword').setErrors({ passwordMismatch: true });\r\n    } else {\r\n      // Clear the custom error when passwords match\r\n      control.get('confirmPassword').setErrors(null);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AdminPanelRoutingModule } from './admin-panel-routing.module';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { InterviewQuestionsModule } from '../interview-questions/interview-questions.module';\r\nimport { InterviewQuestionsPanelComponent } from './interview-questions-panel/interview-questions-panel.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n  InterviewQuestionsPanelComponent,\r\n  LoginComponent\r\n ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    AdminPanelRoutingModule,\r\n    FontAwesomeModule,\r\n    InterviewQuestionsModule,    \r\n    ReactiveFormsModule\r\n  ],\r\n})\r\nexport class AdminPanelModule { }\r\n"]}
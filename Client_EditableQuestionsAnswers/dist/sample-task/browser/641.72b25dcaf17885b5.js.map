{"version":3,"file":"641.72b25dcaf17885b5.js","mappings":"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","names":["InterviewQuestionsPanelComponent","constructor","questionAnswerService","router","loaderService","platformId","highlightService","this","ngOnInit","localStorage","getItem","currentData","subscribe","data","result","questionAnswerList","display","hightLightAgain","getQuestionAnswerListServerSide","navigateByUrl","e","PLATFORM_ID","selectors","i0","ctx_r4","oxw","ctx_r6","ctx_r8","routes","path","component","fb","username","password","userForm","group","Validators","confirmPassword","validator","passwordMatchValidator","setIsAdmin","toggleRegistrationFields","showRegistrationFields","get","setValue","submitForm","hasError","alert","value","length","valid","signUp","isAdmin","response","isUserRegistered","reset","message","error","getloginDetails","matchingUser","find","user","console","log","setItem","a","navigate","getUsers","success","users","deleteUser","deleteloginDetails","updatePassword","newPassword","updateloginDetails","blurEventHandler","event","target","classList","remove","enteredValue","add","control","setErrors","passwordMismatch","LoginComponent","ctx","AdminPanelRoutingModule","CommonModule","RouterModule","AdminPanelModule","FormsModule","FontAwesomeModule","InterviewQuestionsModule","ReactiveFormsModule"],"sourceRoot":"webpack:///","sources":["./src/app/admin-panel/interview-questions-panel/interview-questions-panel.component.ts","./src/app/admin-panel/interview-questions-panel/interview-questions-panel.component.html","./src/app/admin-panel/login/login.component.html","./src/app/admin-panel/admin-panel-routing.module.ts","./src/app/admin-panel/login/login.component.ts","./src/app/admin-panel/admin-panel.module.ts"],"sourcesContent":["import { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';\r\nimport {QuestionAnswerService} from '../../services/question-answer-service/question-answer.service';\r\nimport { Router } from '@angular/router';\r\nimport {LoaderService} from './../../services/loader-service/loader.service';\r\nimport { HightlightService } from 'src/app/services/highlight-service/hightlight.service';\r\n\r\n@Component({\r\n  selector: 'app-interview-questions-panel',\r\n  templateUrl: './interview-questions-panel.component.html',\r\n  styleUrls: ['./interview-questions-panel.component.scss']\r\n})\r\nexport class InterviewQuestionsPanelComponent implements OnInit {\r\n\r\n  questionAnswerList:any;\r\n  platformId: Object;\r\n  constructor(\r\n    private questionAnswerService:QuestionAnswerService,\r\n    private router:Router,private loaderService:LoaderService,\r\n    @Inject(PLATFORM_ID) platformId: Object,\r\n    private highlightService: HightlightService\r\n  ) {\r\n      this.platformId = platformId;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if(this.platformId && localStorage.getItem('loggedIn')==\"true\") {\r\n      this.questionAnswerService.currentData.subscribe((data)=>{\r\n        if (data && data['result']) {\r\n          this.questionAnswerList = data['result'];\r\n          this.loaderService.display(false);\r\n          this.highlightService.hightLightAgain();\r\n        }\r\n     })\r\n     this.questionAnswerService.getQuestionAnswerListServerSide();\r\n   }\r\n   else {\r\n     this.router.navigateByUrl('/admin-panel');\r\n   }\r\n  }\r\n}\r\n","<app-question-answer-panel [questionAnswerList]=\"questionAnswerList\" [adminMode]=true></app-question-answer-panel>\r\n","<div class=\"container loginPannel-maincontainer\">\r\n    <div class=\"loginPannel-container\">\r\n        <fieldset>\r\n            <legend class=\"login-register\">{{ showRegistrationFields ? 'Register' : 'Login' }}:</legend>\r\n            <form [formGroup]=\"userForm\" (ngSubmit)=\"submitForm()\">\r\n                <!-- Existing username and password fields -->\r\n                <div class=\"Sign-upContainer\">\r\n                    <label for=\"username\" class=\"col-4 col-form-label\">Username</label>\r\n                    <div class=\"col-8\">\r\n                        <input id=\"username\" name=\"username\" formControlName=\"username\" (blur)=\"blurEventHandler($event)\"\r\n                            placeholder=\"Enter your Username\" type=\"text\" class=\"form-control\" required>\r\n                    </div>\r\n                </div>\r\n                <div class=\"Sign-upContainer\">\r\n                    <label for=\"password\" class=\"col-4 col-form-label\">Password</label>\r\n                    <div class=\"col-8\">\r\n                        <input id=\"password\" name=\"password\" formControlName=\"password\" (blur)=\"blurEventHandler($event)\"\r\n                            placeholder=\"Enter your Password\" type=\"password\" class=\"form-control\" required>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Registration fields (conditionally displayed) -->\r\n                <div *ngIf=\"showRegistrationFields\">\r\n                    <div class=\"Sign-upContainer\">\r\n                        <label for=\"confirmPassword\" class=\"col-4 col-form-label\">Confirm Password</label>\r\n                        <div class=\"col-8\">\r\n                            <input id=\"confirmPassword\" name=\"confirmPassword\" formControlName=\"confirmPassword\" (blur)=\"blurEventHandler($event)\"\r\n                                placeholder=\"Confirm Password\" type=\"password\" class=\"form-control\" required>\r\n                            <!-- Display a validation error message if passwords do not match -->\r\n                            <div *ngIf=\"userForm.get('password').hasError('passwordMismatch') && userForm.get('confirmPassword').touched\">\r\n                                Passwords do not match.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"Sign-upContainer\">\r\n                    <label for=\"username\" class=\"col-4 col-form-label\"></label>\r\n                    <div class=\"col-8\">\r\n                        <!-- Show the \"Submit\" button and the appropriate button based on registration mode -->\r\n                        <button type=\"submit\" class=\"Submit-btn btn\">Submit</button>\r\n                        <button *ngIf=\"showRegistrationFields\" class=\"btn login-btn\" (click)=\"toggleRegistrationFields()\">Login</button>\r\n                        <button *ngIf=\"!showRegistrationFields\" class=\"btn login-btn\" (click)=\"toggleRegistrationFields()\">Register</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </fieldset>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { InterviewQuestionsPanelComponent } from './interview-questions-panel/interview-questions-panel.component';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'updateInterviewQuestions',\r\n    component: InterviewQuestionsPanelComponent\r\n  },\r\n  {\r\n    path: 'admin-panel/updateInterviewQuestions',\r\n    component: InterviewQuestionsPanelComponent\r\n  },\r\n\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes)\r\n  ]\r\n})\r\nexport class AdminPanelRoutingModule { }\r\n","import { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\nimport { QuestionAnswerService } from '../../services/question-answer-service/question-answer.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  platformId: Object;\r\n  userForm: FormGroup;\r\n  showRegistrationFields: boolean = false;\r\n  isUserRegistered: boolean = false;\r\n  users: any[] = [];\r\n  login: any = { username: \"\", password: \"\" };\r\n\r\n  constructor(\r\n    private questionAnswerService: QuestionAnswerService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    @Inject(PLATFORM_ID) platformId: Object\r\n  ) {\r\n    this.platformId = platformId;\r\n\r\n    this.userForm = this.fb.group({\r\n      username: ['', [Validators.required, Validators.minLength(3)]],\r\n      password: ['', [Validators.required]],\r\n      confirmPassword: ['']\r\n    }, {\r\n      validator: this.passwordMatchValidator\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.platformId && localStorage.getItem('loggedIn') == \"true\") {\r\n      this.questionAnswerService.setIsAdmin(true);\r\n      // this.redirectToUpdateQuestions();\r\n    }\r\n  }\r\n\r\n  toggleRegistrationFields() {\r\n    this.showRegistrationFields = !this.showRegistrationFields;\r\n    this.userForm.get('confirmPassword').setValue('');\r\n  }\r\n\r\n  submitForm() {\r\n    if (this.showRegistrationFields) {\r\n      // Registration logic\r\n      if (this.userForm.get('confirmPassword').hasError('passwordMismatch')) {\r\n        // Check for password mismatch error\r\n        alert('Password and Confirm Password should match!');\r\n        return; // Stop processing and exit the function\r\n      }\r\n\r\n      // Check if blur event conditions are satisfied for username and password\r\n      if (\r\n        this.userForm.get('username').hasError('minlength') ||\r\n        this.userForm.get('username').hasError('required') ||\r\n        this.userForm.get('password').hasError('required') ||\r\n        this.userForm.get('username').value.length < 3 ||\r\n        this.userForm.get('password').value.length < 3\r\n      ) {\r\n        alert('Minimum 3 alphabets or numbers required!');\r\n        return; // Stop processing and exit the function\r\n      }\r\n\r\n      if (this.userForm.valid) {\r\n        // If the form is valid, proceed with registration\r\n        const username = this.userForm.get('username').value;\r\n        const password = this.userForm.get('password').value;\r\n\r\n        // Call the signUp API to register the user\r\n        this.questionAnswerService.signUp({ username, password, isAdmin: false }).subscribe(\r\n          (response: any) => {\r\n            if (response) {\r\n              // Registration successful\r\n              alert('Registration successful!');\r\n              this.isUserRegistered = true;\r\n              this.userForm.reset(); // Reset the form\r\n            } else {\r\n              alert('Registration failed: ' + response.message);\r\n            }\r\n          },\r\n          (error) => {\r\n            alert('Registration failed: ' + error.message);\r\n          }\r\n        );\r\n      } else {\r\n        // Registration form validation failed\r\n        alert('Please fill in all required fields and ensure passwords match.');\r\n      }\r\n    } else {\r\n      // Login logic\r\n      if (this.userForm.get('username').valid && this.userForm.get('password').valid) {\r\n        // If the form is valid, proceed with login\r\n        const username = this.userForm.get('username').value;\r\n        const password = this.userForm.get('password').value;\r\n\r\n        // Call the getloginDetails API to retrieve registered user details\r\n        this.questionAnswerService.getloginDetails().subscribe(\r\n          (response: any) => {\r\n            if (response) {\r\n              const matchingUser = response.find((user) => user.username === username && user.password === password);\r\n              if (matchingUser) {\r\n                console.log('isAdmin:', matchingUser.isAdmin); // Debugging line\r\n\r\n                // alert('Login successful!');\r\n                this.questionAnswerService.setIsAdmin(matchingUser.isAdmin);\r\n                localStorage.setItem('loggedIn', 'true');\r\n                if (matchingUser.isAdmin) {\r\n                  // Admin login\r\n                  // alert('Admin login successful!');\r\n                  this.router.navigateByUrl('/admin-panel/updateInterviewQuestions');\r\n                } else {\r\n                  // Regular user login\r\n                  // alert('User login successful!');\r\n                  this.router.navigate(['/userPost']);\r\n                }\r\n                // Login successful\r\n                // alert('Login successful!');\r\n                this.questionAnswerService.setIsAdmin(false);\r\n                localStorage.setItem('loggedIn', 'true');\r\n                // this.redirectToUpdateQuestions();\r\n              } else {\r\n                // Login failed: Invalid credentials\r\n                alert('Login failed: Invalid username or password.');\r\n              }\r\n            } else {\r\n              alert('Login failed: ' + response.message);\r\n            }\r\n          },\r\n          (error) => {\r\n            alert('Login failed: ' + error.message);\r\n          }\r\n        );\r\n      } else {\r\n        // Login form validation failed\r\n        alert('Please fill in valid username and password.');\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // Function to retrieve users\r\n  getUsers() {\r\n    this.questionAnswerService.getloginDetails().subscribe(\r\n      (response: any) => {\r\n        if (response.success) {\r\n          // Handle successful retrieval of users here\r\n          this.users = response.data;\r\n        } else {\r\n          alert('Failed to retrieve users: ' + response.message);\r\n        }\r\n      },\r\n      (error) => {\r\n        alert('Failed to retrieve users: ' + error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Function to delete a user\r\n  deleteUser(username: string) {\r\n    this.questionAnswerService.deleteloginDetails(username).subscribe(\r\n      (response: any) => {\r\n        if (response.success) {\r\n          // Handle successful deletion of the user here\r\n          alert('User deleted successfully.');\r\n          // Optionally, you can update the user list or perform other actions\r\n        } else {\r\n          alert('Failed to delete user: ' + response.message);\r\n        }\r\n      },\r\n      (error) => {\r\n        alert('Failed to delete user: ' + error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Function to update user password\r\n  updatePassword(username: string, newPassword: string) {\r\n    this.questionAnswerService.updateloginDetails({ username, password: newPassword }).subscribe(\r\n      (response: any) => {\r\n        if (response.success) {\r\n          // Handle successful password update here\r\n          alert('Password updated successfully.');\r\n          // Optionally, you can reset the form or perform other actions\r\n        } else {\r\n          alert('Failed to update password: ' + response.message);\r\n        }\r\n      },\r\n      (error) => {\r\n        alert('Failed to update password: ' + error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  blurEventHandler(event: FocusEvent) {\r\n    (event.target as HTMLInputElement).classList.remove('invalid-input');\r\n    const enteredValue = (event.target as HTMLInputElement).value;\r\n    if (enteredValue.length < 3) {\r\n      (event.target as HTMLInputElement).classList.add('invalid-input');\r\n    }\r\n  }\r\n  // redirectToUpdateQuestions() {\r\n  //   this.router.navigateByUrl('/admin-panel/updateInterviewQuestions');\r\n  // }\r\n\r\n  // Custom validator function to check if passwords match\r\n  passwordMatchValidator(control: AbstractControl) {\r\n    const password = control.get('password').value;\r\n    const confirmPassword = control.get('confirmPassword').value;\r\n\r\n    if (password !== confirmPassword) {\r\n      control.get('confirmPassword').setErrors({ passwordMismatch: true });\r\n    } else {\r\n      // Clear the custom error when passwords match\r\n      control.get('confirmPassword').setErrors(null);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AdminPanelRoutingModule } from './admin-panel-routing.module';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { InterviewQuestionsModule } from '../interview-questions/interview-questions.module';\r\nimport { InterviewQuestionsPanelComponent } from './interview-questions-panel/interview-questions-panel.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n  InterviewQuestionsPanelComponent,\r\n  LoginComponent\r\n ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    AdminPanelRoutingModule,\r\n    FontAwesomeModule,\r\n    InterviewQuestionsModule,    \r\n    ReactiveFormsModule\r\n  ],\r\n})\r\nexport class AdminPanelModule { }\r\n"]}
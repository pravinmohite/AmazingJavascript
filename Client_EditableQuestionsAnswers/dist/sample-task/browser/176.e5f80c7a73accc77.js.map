{"version":3,"file":"176.e5f80c7a73accc77.js","mappings":"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","names":["i0","UserBlogPopupComponent","constructor","questionAnswerService","loaderService","cd","highlightService","this","EventEmitter","question","answer","rank","editable","spellcheck","minHeight","maxHeight","placeholder","translate","sanitize","outline","defaultParagraphSeparator","customClasses","name","class","tag","toolbarHiddenButtons","ngOnInit","editMode","getQuestionTypes","display","subscribe","response","questionTypes","closeAddEditPopup","popupEvent","emit","addQuestionMarkIfNotPresent","trimmedQuestion","trim","lastCharacter","charAt","length","convertAnswerHtmlIntoString","tempElement","document","createElement","tempDiv","innerHTML","headings","querySelectorAll","forEach","heading","textAlign","style","outerHTML","p","replace","formattedAnswer","tempSattu","parser","DOMParser","parseFromString","value","fontTag","querySelector","attributes","color","saveInterviewQuestionAnswer","console","log","interviewQuestion","updateUserPost","addUserPost","updateAnswer","onChange","event","checkForImage","onBlur","editor","textArea","nativeElement","editorElement","image","classList","add","makeResizable","addEventListener","e","preventDefault","initialWidth","clientWidth","initialHeight","clientHeight","startX","clientX","startY","clientY","resize","height","width","stopResize","window","removeEventListener","selectors","AngularEditorComponent","ctx","ctx_r2","oxw","ctx_r5","ctx_r7","routes","path","component","faEdit","id","itemsPerPage","currentPage","totalItems","fetchUserArticles","paginationConfig","userBlogItems","toggleShowHideAnswer","item","showAnswer","buttonText","getUserPostList","editArticle","data","editedItem","showPopup","openPopup","closePopup","addQuestionMarkIfNotPresentCondition","UserPostComponent","UserPostRoutingModule","RouterModule","UserPostModule","CommonModule","FontAwesomeModule","FormsModule","AppRoutingModule","HttpClientModule","AngularEditorModule","NgxPaginationModule"],"sourceRoot":"webpack:///","sources":["./src/app/user-blog-popup/user-blog-popup.component.html","./src/app/user-blog-popup/user-blog-popup.component.ts","./src/app/user-post/user-post.component.html","./src/app/user-post/user-post-routing.module.ts","./src/app/user-post/user-post.component.ts","./src/app/user-post/user-post.module.ts"],"sourcesContent":["<div class=\"modal\">\n    <div class=\"modal-content\">\n      <div>\n        <fieldset>\n          <legend>Add Article:</legend>\n          <div class=\"form-group row\">\n            <label for=\"question\" class=\"col-3 col-form-label\">Title</label>\n            <div class=\"col-9\">\n              <textarea id=\"question\" name=\"question\" [(ngModel)]=\"interviewQuestion.question\"\n                placeholder=\"Enter Article Title\" type=\"text\" class=\"form-control\"></textarea>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label for=\"answer\" class=\"col-3 col-form-label\">Details</label>\n            <div class=\"col-9\">\n              <!-- angular editor -->\n              <div>\n                <angular-editor #editor id=\"editor1\" [(ngModel)]=\"interviewQuestion.answer\" [config]=\"config1\" (ngModelChange)=\"onChange($event)\" (blur)=\"onBlur($event)\">\n                </angular-editor>\n              </div>\n              <!-- angular editor -->\n              <!-- <textarea id=\"answer\" [(ngModel)]=\"interviewQuestion.answer\" placeholder=\"Enter Answer\" name=\"answer\"\n                cols=\"40\" rows=\"5\" class=\"form-control textarea \"></textarea> -->\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label for=\"type\" class=\"col-3 col-form-label\">Type</label>\n            <div class=\"col-9\">\n              <select id=\"type\" name=\"type\" class=\"custom-select\" [(ngModel)]=\"interviewQuestion.questionType\">\n                <option *ngFor=\"let item of questionTypes\" [value]=\"item.questionType\">{{item.questionType}}</option>\n              </select>\n            </div>\n          </div>\n          <!-- <div class=\"form-group row\">\n            <label for=\"text\" class=\"col-3 col-form-label\">Email</label>\n            <div class=\"col-9\">\n              <input id=\"text\" [(ngModel)]=\"interviewQuestion.rank\" name=\"text\" placeholder=\"Enter your email\" type=\"text\"\n                class=\"form-control\">\n            </div>\n          </div> -->\n          <div class=\"form-group row\">\n            <div class=\"offset-3 col-md-3 col-4\">\n              <button name=\"submit\" type=\"submit\" class=\"btn btn-primary btn-full-width\"\n                (click)=\"saveInterviewQuestionAnswer()\">Submit</button>\n            </div>\n            <div class=\"col-md-3 col-4\">\n              <button name=\"submit\" (click)=\"closeAddEditPopup()\" type=\"submit\"\n                class=\"btn btn-danger btn-full-width\">Cancel</button>\n            </div>\n          </div>\n        </fieldset>\n      </div>\n    </div>\n  </div>\n  ","import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { HightlightService } from 'src/app/services/highlight-service/hightlight.service';\nimport { QuestionAnswerService } from \"./../services/question-answer-service/question-answer.service\";\nimport { LoaderService } from './../services/loader-service/loader.service';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { AngularEditorComponent, AngularEditorConfig } from '@kolkov/angular-editor';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-user-blog-popup',\n  templateUrl: './user-blog-popup.component.html',\n  styleUrls: ['./user-blog-popup.component.scss']\n})\nexport class UserBlogPopupComponent implements OnInit {\n  @Output() closePopup: EventEmitter<void> = new EventEmitter<void>();\n  @Output() questionAnswerSaved = new EventEmitter<any>();\n\n    @ViewChild(AngularEditorComponent) editor: AngularEditorComponent; // ViewChild reference to the AngularEditorComponent\n    editorContent: string = ''; // Initialize with an empty string or appropriate content\n  \n    questionTypes: any;\n    interviewQuestion: any = { question: '', answer: '', rank: '' };\n    @Input() editedItem;\n    editMode: Boolean = true;\n    @Output() popupEvent = new EventEmitter();\n    tempDiv = 'div';\n  \n    tempSattu: any;\n    constructor(\n      private questionAnswerService: QuestionAnswerService,\n      private loaderService: LoaderService,\n      private cd: ChangeDetectorRef,\n      private highlightService: HightlightService,\n    ) {\n    }\n  \n    ngOnInit(): void {\n  //    if (Object.keys(this.editedItem).length === 0 && this.editedItem.constructor === Object)\n        this.editMode = false;\n    //  this.interviewQuestion = JSON.parse(JSON.stringify(this.editedItem));\n      this.getQuestionTypes();\n    //  this.cd.detectChanges(); console.log('Initial Interview Question:', this.interviewQuestion);\n      // Call the highlightAll() method here\n      // this.highlightService.highlightAll();\n    }\n    getQuestionTypes() {\n      this.loaderService.display(true);\n      this.questionAnswerService.getQuestionTypes().subscribe(response => {\n        this.questionTypes = response;\n        this.loaderService.display(false);\n      });\n    }\n    closeAddEditPopup() {\n      this.popupEvent.emit('closeQuestionAnswerPopup');\n    }\n  \n    // convertCodeContentHtmlIntoString() {\n    //   var tempElement = document.createElement(this.tempDiv);\n    //   tempElement.innerHTML = this.interviewQuestion.answer;\n    //   this.highlightService.convertHtmlIntoStringForCodeContent(tempElement);\n    //   this.interviewQuestion.answer = tempElement.innerHTML;\n    // }\n  \n  \n    addQuestionMarkIfNotPresent(question: string) {\n      const trimmedQuestion = question.trim();\n      const lastCharacter = trimmedQuestion.charAt(trimmedQuestion.length - 1);\n  \n      if (lastCharacter !== '?' && lastCharacter !== '.' && lastCharacter !== ':') {\n        return trimmedQuestion + ' ?';\n      }\n  \n      return trimmedQuestion;\n    }\n  \n    convertAnswerHtmlIntoString(answer: string): string {\n      const tempElement = document.createElement(this.tempDiv);\n      tempElement.innerHTML = answer;\n      // Handle headings (h1 to h7)\n      const headings = tempElement.querySelectorAll('h1, h2, h3, h4, h5, h6, h7');\n      headings.forEach((heading: HTMLElement) => {\n        const textAlign = heading.style.textAlign;\n        if (textAlign === 'center') {\n          heading.outerHTML = `<div class=\"text-center\">${heading.outerHTML}</div>`;\n        } else if (textAlign === 'right') {\n          heading.outerHTML = `<div class=\"text-right\">${heading.outerHTML}</div>`;\n        } else if (textAlign === 'left') {\n          heading.outerHTML = `<div class=\"text-left\">${heading.outerHTML}</div>`;\n        }\n      });\n  \n  \n      // Replace placeholders with corresponding code section tags\n      tempElement.innerHTML = tempElement.innerHTML\n        .replace(/&lt;scss&gt;/g, '<div class=\"code-snippet\"><pre><code class=\"language-scss\">')\n        .replace(/&lt;\\/scss&gt;/g, '</code></pre></div>')\n        .replace(/&lt;html&gt;/g, '<div class=\"code-snippet\"><pre><code class=\"language-html\">')\n        .replace(/&lt;\\/html&gt;/g, '</code></pre></div>')\n        .replace(/&lt;typescript&gt;/g, '<div class=\"code-snippet\"><pre><code class=\"language-typescript\">')\n        .replace(/&lt;\\/typescript&gt;/g, '</code></pre></div>');\n  \n      let formattedAnswer = tempElement.innerHTML;\n  \n      // Additional adjustment to preserve line breaks within code sections\n      formattedAnswer = formattedAnswer.replace(/<p>/g, '\\n').replace(/<\\/p>/g, '');\n      this.tempSattu = formattedAnswer;\n      let parser = new DOMParser();\n      this.tempSattu = parser.parseFromString(this.tempSattu, 'text/html');\n      let fontTag = this.tempSattu.querySelector('font');\n      let value;\n      if(fontTag) {\n          value = fontTag.attributes.color.value;\n          formattedAnswer = formattedAnswer.replace(/<font[^>]*>/g, '<span style=\"color:'+ value +'\">').replace(/<\\/font>/g, '</span>');\n      }\n      return formattedAnswer;\n    }\n  \n    saveInterviewQuestionAnswer() {\n      console.log('Interview Question before save:', this.interviewQuestion);\n  \n      // Convert answer HTML into formatted string\n      this.interviewQuestion.answer = this.convertAnswerHtmlIntoString(this.interviewQuestion.answer);\n      // Wrap center-aligned <img> elements in a <div> with the 'img-center' class\n      this.interviewQuestion.answer = this.interviewQuestion.answer.replace(/<img style=\"display: block; margin: 0 auto;\">/g, '<div class=\"img-center\">')\n        .replace(/<\\/img>/g, '</div>');\n  \n      // Wrap right-aligned <img> elements in a <div> with the 'img-right' class\n      this.interviewQuestion.answer = this.interviewQuestion.answer.replace(/<img style=\"float: right;\">/g, '<div class=\"img-right\">')\n        .replace(/<\\/img>/g, '</div>');\n  \n      // Wrap right-aligned <img> elements in a <div> with the 'img-left' class\n      this.interviewQuestion.answer = this.interviewQuestion.answer.replace(/<img style=\"float: left;\">/g, '<div class=\"img-left\">')\n        .replace(/<\\/img>/g, '</div>');\n      // Wrap center-aligned content in a <div> with the 'text-center' class\n      this.interviewQuestion.answer = this.interviewQuestion.answer.replace(/<p style=\"text-align: center;\">/g, '<div class=\"text-center\">')\n        .replace(/<\\/p>/g, '</div>');\n  \n      // Wrap right-aligned content in a <div> with the 'text-right' class\n      this.interviewQuestion.answer = this.interviewQuestion.answer.replace(/<p style=\"text-align: right;\">/g, '<div class=\"text-right\">')\n        .replace(/<\\/p>/g, '</div>');\n      // Wrap right-aligned content in a <div> with the 'text-left' class\n      this.interviewQuestion.answer = this.interviewQuestion.answer.replace(/<p style=\"text-align: left;\">/g, '<div class=\"text-left\">')\n        .replace(/<\\/p>/g, '</div>');\n  \n      if (this.editMode) {\n        this.questionAnswerService.updateUserPost(this.interviewQuestion);\n      } else {\n        this.questionAnswerService.addUserPost(this.interviewQuestion);\n      }\n  \n      \n\n      this.closeAddEditPopup();\n      console.log('Interview Question after save:', this.interviewQuestion);\n    }\n  \n  \n    // angular editor\n    form: FormGroup;\n  \n    updateAnswer() {\n      this.interviewQuestion.answer = ''; // Assigning a value to the answer property\n    }\n  \n    config1: AngularEditorConfig = {\n      editable: true,\n      spellcheck: true,\n      minHeight: '5rem',\n      maxHeight: 'auto',\n      placeholder: 'Enter Article Details here...',\n      translate: 'no',\n      sanitize: false,\n      // toolbarPosition: 'top',\n      outline: true,\n      // defaultFontName: 'Comic Sans MS',\n      // defaultFontSize: '5',\n      // showToolbar: false,\n      defaultParagraphSeparator: 'p',\n      customClasses: [\n        {\n          name: 'quote',\n          class: 'quote',\n        },\n        {\n          name: 'redText',\n          class: 'redText'\n        },\n        {\n          name: 'text-center',\n          class: 'text-center',\n        },\n        {\n          name: 'text-right',\n          class: 'text-right',\n        },\n        {\n          name: 'img-center',\n          class: 'img-center',\n        },\n        {\n          name: 'img-right',\n          class: 'img-right',\n        },\n        {\n          name: 'titleText',\n          class: 'titleText',\n          tag: 'h1',\n        },\n      ],\n      toolbarHiddenButtons: [\n        // ['bold', 'italic'],\n        // ['fontSize']\n      ]\n    };\n  \n    onChange(event) {\n      console.log('changed');\n      this.interviewQuestion.answer = event; // Manually update the answer\n      this.checkForImage();\n    }\n  \n    onBlur(event) {\n      console.log('blur ' + event);\n      this.interviewQuestion.answer = this.editor.textArea.nativeElement.innerHTML;\n    }\n  \n    checkForImage() {\n      const editorElement = this.editor.textArea.nativeElement; // Access the underlying textarea element\n      const images = editorElement.querySelectorAll('img'); // Select all images within the editoror\n  \n      images.forEach((image) => {\n        image.classList.add('your-dynamic-class1'); // Add your class to the image element\n        this.makeResizable(image); // Call the method to make images resizable\n      });\n    }\n  \n    makeResizable(image: HTMLImageElement) {\n      // Add resize functionality to the image\n      image.addEventListener('mousedown', (e) => {\n        e.preventDefault();\n        const initialWidth = image.clientWidth;\n        const initialHeight = image.clientHeight;\n        const startX = e.clientX;\n        const startY = e.clientY;\n  \n        const resize = (e) => {\n          const width = initialWidth + e.clientX - startX;\n          const height = initialHeight + e.clientY - startY;\n          image.style.width = `${width}px`;\n          image.style.height = `${height}px`;\n        };\n  \n        const stopResize = () => {\n          window.removeEventListener('mousemove', resize);\n          window.removeEventListener('mouseup', stopResize);\n        };\n  \n        window.addEventListener('mousemove', resize);\n        window.addEventListener('mouseup', (e) => {\n          stopResize();\n          // Update the answer with modified content\n          this.interviewQuestion.answer = this.editor.textArea.nativeElement.innerHTML;\n        });\n      });\n    }\n  \n   \n}\n","<div class=\"offset-md-1 col-md-8 col-12 AddArticle\">\n  <button class=\"btn add-questions-btn hand-cursor\" (click)=\"openPopup()\">+ Add Article</button>\n  <app-user-blog-popup [editedItem]=\"editedItem\" (closePopup)=\"closePopup($event)\"\n    *ngIf=\"showPopup\"></app-user-blog-popup>\n</div>\n<div class=\"row\">\n  <div class=\"col-12\">\n    <div *ngFor=\"let item of userBlogItems | paginate: paginationConfig\">\n      <div class=\"offset-md-1 col-md-8 col-12 main-questions-container\">\n        <!-- Display each saved item here using item.question and item.answer -->\n        <div class=\"panel-container question-answer-detailcontainer\">\n          <div class=\"panel-item\">\n            <div class=\"panel-header\" role=\"img\" aria-label=\"frontend interview questions\">\n              <div class=\"row\">\n                <div class=\"col-xl-10 col-md-9\">\n                  <header>\n                    <h1 class=\"question-text\" [innerHtml]=\"addQuestionMarkIfNotPresent(item.question)\"></h1>\n                  </header>\n                </div>\n                <!-- Edit button -->\n                <div class=\"col-xl-2 col-md-3 action-btns text-right\">\n                  <div class=\"col-md-7\">\n                    <fa-icon class=\"hand-cursor edit-icon\" [icon]=\"faEdit\" (click)=\"editArticle(item)\"></fa-icon>\n                  </div>\n\n                  <button class=\"col-md-5 showHideAnswer hand-cursor btn-show-hide\"\n                    (click)=\"toggleShowHideAnswer(item)\">{{item.buttonText?item.buttonText:\"Show\"}}</button>\n                </div>\n              </div>\n            </div>\n            <div class=\"panel-body\" [ngClass]=\"{'open': item.showAnswer ==true}\">\n              <div class=\"panel-body\" [ngClass]=\"{'open': true}\">\n                <div class=\"panel-body-content\" [innerHtml]=\"item.answer\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- Other HTML elements for saved items here -->\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\" offset-md-1 col-md-8 col-12 pagination-container d-flex justify-content-center\">\n  <pagination-controls (pageChange)=\"paginationConfig.currentPage = $event\"\n    [id]=\"paginationConfig.id\"></pagination-controls>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { UserPostComponent } from './user-post.component';\n\nconst routes: Routes = [\n  {\n    path:'', component: UserPostComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UserPostRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { QuestionAnswerService } from '../services/question-answer-service/question-answer.service';\nimport { LoaderService } from '../services/loader-service/loader.service';\nimport { Observable } from 'rxjs'; // Import Observable\nimport { faTrash,faEdit, faTimes, faExternalLinkSquareAlt } from '@fortawesome/free-solid-svg-icons';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { HightlightService } from 'src/app/services/highlight-service/hightlight.service';\n\n@Component({\n  selector: 'app-user-post',\n  templateUrl: './user-post.component.html',\n  styleUrls: ['./user-post.component.scss']\n})\nexport class UserPostComponent implements OnInit {\n  showPopup: boolean = false;\n  userBlogItems: any[] = [];\n  editedItem: any;\n  lastFilledPopup: any;\n  editMode: boolean = false;\n  faEdit=faEdit;\n  constructor(\n    private loaderService: LoaderService,\n    private questionAnswerService: QuestionAnswerService,\n  ) { }\n\n  ngOnInit(): void {\n    this.fetchUserArticles();\n    this.paginationConfig.totalItems = this.userBlogItems.length;\n\n  }\n  toggleShowHideAnswer(item) {\n    if(!item.showAnswer) {\n      item.showAnswer=true;\n      item.buttonText=\"Hide\"\n    }\n    else {\n     item.showAnswer=false;\n     item.buttonText=\"Show\"\n    }\n  }\n  fetchUserArticles() {\n    this.loaderService.display(true);\n    this.questionAnswerService.getUserPostList().subscribe((response: any) => {\n      this.userBlogItems = response;\n      this.loaderService.display(false);\n    });\n  }\n  paginationConfig: PaginationInstance = {\n    id: 'userArticlesPagination',\n    itemsPerPage: 10, \n    currentPage: 1, \n    totalItems: 0, // Total number of items (will be updated in the ngOnInit)\n  };\n  \n  \n  editArticle(data) {\n    this.editedItem=data;\n    this.showPopup=true;\n  }\n  openPopup() {\n    this.showPopup = true;\n    this.editedItem={}\n    this.paginationConfig.currentPage = 1;\n  }\n \n  closePopup(event) {\n    if(event==\"closeQuestionAnswerPopup\") {\n      this.showPopup=false;\n    }\n    else {\n      this.showPopup=false;\n    } \n  }\n  addQuestionMarkIfNotPresent(question: string): string {\n    return this.questionAnswerService.addQuestionMarkIfNotPresentCondition(question);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UserPostRoutingModule } from './user-post-routing.module';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from '../app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AngularEditorModule } from '@kolkov/angular-editor';\nimport { UserBlogPopupComponent } from '../user-blog-popup/user-blog-popup.component';\nimport { UserPostComponent } from './user-post.component';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\n\n@NgModule({\n  declarations: [\n    UserPostComponent, \n    UserBlogPopupComponent,\n  ],\n  imports: [\n    CommonModule,\n    UserPostRoutingModule,\n    FontAwesomeModule,\n    FormsModule,\n    AppRoutingModule,\n    HttpClientModule, \n    AngularEditorModule,\n    NgxPaginationModule\n  ]\n})\nexport class UserPostModule { }\n"]}